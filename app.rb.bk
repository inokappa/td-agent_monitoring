#!/usr/bin/env ruby

require 'json'
require 'open-uri'
require 'erb'
require 'sinatra/reloader'

class Conn
  def gen_json_url(host)
    status_html = open("http://host:24220/api/plugins.json").read
    JSON.parser.new(status_html).parse()
  end
end

class Tdstatus < Conn
  def get_td_status
    file = open("./list.txt")
    statuses = []
    while text = file.gets do
      result = {}
      arr = text.split(",")
      parsed = gen_json_url("#{arr[0]}")
    end
  end
end

# main
  file = open("./list.txt")
  statuses = []
  while text = file.gets do
    result = {}
    arr = text.split(",")
    status_url = "http://#{arr[1]}:24220/api/plugins.json"
    begin
      status_html = open("#{status_url}").read
    rescue Errno::ECONNREFUSED
      result[:host] = "#{arr[0]} not access"
      result[:stats] = "critical"
    else
      parsed = JSON.parser.new(status_html).parse()
      type = parsed['plugins'][2]['type']
      rtc = parsed['plugins'][2]['retry_count']
      bql = parsed['plugins'][2]['buffer_queue_length']
      btqs = parsed['plugins'][2]['buffer_total_queued_size']
      if (rtc >= 10 or bql >= 256 or btqs >= 2147483648 )
        stats = "warning"
      else
        stats = "normally"
      end
      result[:hostid] = "#{arr[0]}"
      result[:host] = "#{arr[1]}"
      result[:type] = type
      result[:retry_count] = rtc
      result[:buffer_queue_length] = bql
      result[:buffer_total_queued_size] = btqs
      result[:stats] = stats
    end
  end
  statuses << result
end

get '/status' do
  @result = Tdstatus.statuses
  erb :index
end

get '/status/:hostid' do
  @result = Tdstatus.get(params[:hostid])
  erb :host
end
